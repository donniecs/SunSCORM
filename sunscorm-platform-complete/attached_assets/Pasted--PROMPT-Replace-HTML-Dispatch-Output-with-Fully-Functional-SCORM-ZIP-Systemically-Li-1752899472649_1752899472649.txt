
---

## 🔧 PROMPT: Replace HTML Dispatch Output with Fully Functional SCORM ZIP (Systemically Linked)

👋 Agent — time to fix a critical gap: **Dispatches are wrongly exporting as HTML files. They must export as full SCORM-compliant ZIPs.** This is non-negotiable — **this is how real platforms like SCORM Cloud handle dispatching**.

We are building a system-level feature, so you must **implement it end-to-end** with **full architectural linkage** — **not just a working ZIP**, but a **system-integrated dispatch mechanism** that:

* aligns with our backend models
* respects soft delete logic
* is testable across the UI
* and exports something clients can upload to their LMS directly.

---

### 🧠 CONTEXT

* This platform dispatches SCORM courses to clients.
* Those clients will import the ZIP we give them into their own LMS.
* That ZIP must **wrap a launch redirect** pointing to our `/launch/:token` endpoint.
* **Right now, it’s exporting a broken `.html` file.**
* Your job is to replace that with a **fully SCORM-valid ZIP**, generated on demand.
* Everything you add **must be connected across all relevant paths**, as described below.

---

## 🎯 OBJECTIVE

> Replace the current HTML-only dispatch output with a downloadable **ZIP package** that is:

* SCORM-compliant (passes SCORM Cloud import)
* Contains a valid `imsmanifest.xml` and `index.html`
* Points to our `/launch/:token` system
* Downloadable from the admin interface
* Fully linked across backend, routes, components, and filters

---

## 🗂️ FILES TO CHECK OR REUSE (NO DUPLICATION)

### 1. Backend:

* `routes.ts` → do we already have `/api/dispatches/:id/export`?
* `storageService.ts` or `storage.ts` → any existing export utilities?
* `scormValidator.ts` → reuse logic if validating output
* `/uploads/dispatches` → is this used? Otherwise, use tmp or memory zip

### 2. Frontend:

* `dispatches.tsx` → where export button will live
* `create-dispatch.tsx` → confirm existing structure doesn’t interfere
* `license-status.tsx`, `company-profile.tsx` → ensure linkage (explained below)

---

## ✅ WHAT TO BUILD

### 1. **Backend Route** — `/api/dispatches/:id/export`

* Method: `GET`
* Inputs: Dispatch ID
* Output: ZIP archive with:

  * `imsmanifest.xml`
  * `index.html` (JS redirect to `/launch/:token`)
  * optional `dispatch.json` metadata
* Use `archiver` or `jszip` to build in-memory ZIP
* Use `res.setHeader('Content-Disposition', 'attachment; filename=dispatch.zip')`

---

### 2. **Launch Page (index.html)**

* Simple HTML + JS redirect page
* Use the actual dispatch token like:

```html
<script>
window.location.href = "https://yourdomain.com/launch/[token]";
</script>
```

* Include fallback `<noscript>` message: "This course requires JavaScript."

---

### 3. **imsmanifest.xml** (Minimal SCORM 1.2 XML)

* Must be placed at **root** of ZIP
* Must include:

  * `organization` → name of course
  * `resource` → href to `index.html`
  * Match SCORM 1.2 schema
* Do **not** reference any files that don’t exist in the ZIP

---

### 4. **Frontend Button** — Add “Export Dispatch” Button

* Location: `dispatches.tsx` table row actions
* Behavior:

  * Button triggers `GET /api/dispatches/:id/export`
  * Downloads `dispatch.zip`
* Tooltip: “Download SCORM Dispatch ZIP”

---

## 🔁 SYSTEMIC LINKAGE REQUIREMENTS (DO NOT SKIP)

🔗 This is not just a button — this affects the entire platform. You **must ensure** the following:

| Component              | Requirement                                                                     |
| ---------------------- | ------------------------------------------------------------------------------- |
| `/dispatches` table    | Add export button                                                               |
| `/company-profile`     | Link past dispatch exports if disabled — treat them like historical receipts    |
| `launch/:token`        | Add `dispatch.isDisabled` check — disabled dispatches **must not launch**       |
| `global-search.tsx`    | Ensure search doesn't surface disabled dispatches unless `includeDisabled=true` |
| `/api/xapi/statements` | Ensure xAPI dispatches also respect `isDisabled`                                |
| `getDashboardStats()`  | Must not count disabled dispatches in stats                                     |
| Docs                   | Add usage note to `/docs/dev-notes.md` or `README.md`                           |
| Future                 | Zip file may include license metadata (e.g. max users, expiration)              |

---

### ❌ DO NOT DO THIS

* ❌ Don’t export raw course files — dispatches are **pointers**, not real SCORM courses.
* ❌ Don’t generate hardcoded tokens — use the existing `launchToken` or UUID
* ❌ Don’t skip error handling (e.g. invalid dispatch, already disabled)

---

## 🧪 TEST CASES (Manual QA Required)

| Test                              | Expected                                     |
| --------------------------------- | -------------------------------------------- |
| Export a valid dispatch           | ZIP with manifest + launch HTML              |
| Import into SCORM Cloud           | Launches and redirects properly              |
| Try launching a disabled dispatch | Launch fails gracefully                      |
| Search for dispatch               | Only shows active ones by default            |
| Company history view              | Shows export link even for disabled dispatch |

---

### 🔐 SECURITY

* `/launch/:token` must validate:

  * Dispatch is active
  * Belongs to correct company/tenant
  * Not expired
  * Token is valid (UUID, not guessable)

---

## ✅ EXIT CHECKLIST

* [ ] You generated a valid `dispatch.zip`
* [ ] All content is system-linked
* [ ] Manifest and HTML are SCORM-valid
* [ ] Search, launch, xAPI, company profiles all reflect changes
* [ ] You left doc notes in the project

---

If you have **any doubts** about implementation order or ZIP structure, **pause and confirm before writing logic**.

This is the start of a real commercial SCORM engine. Treat it like you're coding for millions of end users — because you are.

Now execute. ✅

---

